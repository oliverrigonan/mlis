@{
    ViewBag.Title = "Customers Loan Detail";
}

<div class="container body-content">
    <h2>@ViewBag.Title</h2>
    <div>
        <h4>Customer's Loan Transaction</h4>
        <hr />


        <div class="panel panel-default">
            <div class="panel-heading">
                <a href="/Software/LoanList" class="btn btn-default">Back</a>
                <button class="btn btn-primary" id="buttonClickEdit" onclick="buttonClickEdit()">Change</button>
                <button class="btn btn-success" id="buttonClickApprove" onclick="buttonClickApprove()">Approve</button>
                <button class="btn btn-success" id="buttonClickDecline" onclick="buttonClickDecline()">Decline</button>
                <button class="btn btn-danger" id="buttonClickCloseTransaction" onclick="buttonClickCloseTransaction()">Block (Close Transaction)</button>
                <button class="btn btn-primary" id="buttonClickPrint" onclick="buttonClickPrint()">Print</button>
            </div>
        </div>

        <div class="row">
            <div class="col-md-2">
                <img id="imageDisplay2" src="#" class="img-responsive img-thumbnail" />
            </div>
            <div class="col-md-10">
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <td class="col-md-2"><b>Loan Number:</b></td>
                            <td class="col-md-10">
                                <span id="spanLoanNumber"></span>
                            </td>
                        </tr>
                        <tr>
                            <td><b>Customer Name:</b></td>
                            <td>
                                <span id="spanCustomerName"></span>
                            </td>
                        </tr>
                        <tr>
                            <td><b>Term:</b></td>
                            <td>
                                <span id="spanTerm"></span>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <br />
        
        <ul class="nav nav-tabs">
            <li class="active"><a data-toggle="tab" href="#tabComputations">Computations</a></li>
        </ul>

        <br />

        <div class="tab-content">
            <div id="tabComputations" class="tab-pane fade in active">
                <div class="panel panel-default">
                    <div class="panel-body">
                        <form class="form-horizontal" role="form">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Principal Amount</label>
                                        <div class="col-sm-8">
                                            <input id="inputPrincipalAmount" class="form-control text-right number" readonly />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Interest Percentage</label>
                                        <div class="col-sm-8">
                                            <input id="inputInterestPercentage" class="form-control text-right number" readonly />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Interest Amount</label>
                                        <div class="col-sm-8">
                                            <input id="inputInterestAmount" class="form-control text-right number" readonly />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Loan Amount</label>
                                        <div class="col-sm-8">
                                            <input id="inputLoanAmount" class="form-control text-right number" readonly />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Net Amount</label>
                                        <div class="col-sm-8">
                                            <input id="inputNetAmount" class="form-control text-right number" readonly />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Amortization</label>
                                        <div class="col-sm-8">
                                            <input id="inputAmortizationAmount" class="form-control text-right number" readonly />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Total Paid</label>
                                        <div class="col-sm-8">
                                            <input id="inputTotalPaidAmount" class="form-control text-right number" readonly />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Total Penalty</label>
                                        <div class="col-sm-8">
                                            <input id="inputTotalPenaltyAmount" class="form-control text-right number" readonly />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Ending Balance</label>
                                        <div class="col-sm-8">
                                            <input id="inputEndingBalanceAmount" class="form-control text-right number" readonly />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Status</label>
                                        <div class="col-sm-8">
                                            <input id="inputStatus" class="form-control" readonly />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <ul class="nav nav-tabs">
            <li class="active"><a data-toggle="tab" href="#tabChecklist" onclick="loadChecklist()">Checklist</a></li>
            <li><a data-toggle="tab" href="#tabPayments" onclick="loadPaymentsAndPenalties()">Payments and Penalties</a></li>
        </ul>

        <br />

        <div class="tab-content">
            <div id="tabChecklist" class="tab-pane fade in active">
                <div id="wijmoGridLoanChecklistList"></div>
            </div>
            <div id="tabPayments" class="tab-pane fade">
                <div id="wijmoGridCollectionListFlexGrid"></div>
            </div>
        </div>
    </div>

</div>

<div class="modal fae" id="modalLoanDetailForm" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="modalTitle">Edit Loan</h4>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label>Principal Amount:</label>
                        <input id="inputEditPrincipalAmount" class="form-control text-right number input-lg" />
                    </div>
                    <div class="form-group">
                        <label>Term:</label>
                        <div id="wijmoComboboxTerm"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" id="buttonClickUpdateLoan" onclick="buttonClickUpdateLoan()">Update</button>
                <button class="btn btn-danger" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fae" id="modalLoanApproveForm" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="modalTitle">Approve Loan</h4>
            </div>
            <div class="modal-body">
                You are about to approve this loan application. This cannot be undone once this processed.

                <br />
                <br />
                Are you sure you want to approve this application?
            </div>
            <div class="modal-footer">
                <button class="btn btn-success" onclick="buttonClickConfirmApproveLoan()">Approve</button>
                <button class="btn btn-danger" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fae" id="modalLoanDeclineForm" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="modalTitle">Decline Loan</h4>
            </div>
            <div class="modal-body">
                You are about to decline this loan application. This cannot be undone once this processed.

                <br />
                <br />
                Are you sure you want to decline this application?
            </div>
            <div class="modal-footer">
                <button class="btn btn-success" onclick="buttonClickConfirmDeclineLoan()">Decline</button>
                <button class="btn btn-danger" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fae" id="modalLoanCloseTransactionForm" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="modalTitle">Close Transaction</h4>
            </div>
            <div class="modal-body">
                You are about to close this loan transaction. This cannot be undone once this processed. Please enter any valid statement as a reason of closing this transaction.
                <br />
                <br />
                <textarea class="form-control" rows="10" id="inputReasonRemarks"></textarea>
                <br />
                <br />
                Are you sure you want to close this transaction?
            </div>
            <div class="modal-footer">
                <button class="btn btn-warning" onclick="buttonClickConfirmCloseLoan()">Close Transaction</button>
                <button class="btn btn-danger" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fae" id="modalLoanChecklistForm" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="modalTitle">Check List</h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Checklist:</label>
                    <input id="inputChecklist" class="form-control" readonly />
                </div>
                <div class="form-group">
                    <label>Remarks:</label>
                    <textarea id="inputRemarks" class="form-control" rows="5"></textarea>
                </div>
                <div class="form-group">
                    <label>Attachment</label>
                    <input type="file" onchange="previewFile()" class="form-control" />
                    <br />
                    <div>
                        <img id="imageDisplay" src="#" class="img-responsive img-thumbnail" />
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" id="buttonClickUpdateLoanChecklist" onclick="buttonClickUpdateLoanChecklist()">Update</button>
                <button class="btn btn-danger" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var wijmoComboboxTerm;

    var wijmoGridCollectionListCollectionView;
    var wijmoGridCollectionListFlexGridFlexGrid;

    var wijmoGridLoanChecklistList;
    var wijmoCollectionViewLoanChecklistList;

    var imageDataURL;

    function buttonClickEditLoanChecklist() {
        wijmoCollectionViewLoanChecklistList.editItem(wijmoCollectionViewLoanChecklistList.currentItem);
        var currentChecklist = wijmoCollectionViewLoanChecklistList.currentEditItem;

        document.getElementById("inputChecklist").value = currentChecklist.CheckList;
        document.getElementById("inputRemarks").value = currentChecklist.Remarks;
        document.getElementById("imageDisplay").src = "data:image/jpeg;base64," + currentChecklist.ImageAttachment;

        $("#modalLoanChecklistForm").modal({
            show: true,
            backdrop: "static"
        });
    }

    function buttonClickUpdateLoanChecklist() {
        wijmoCollectionViewLoanChecklistList.editItem(wijmoCollectionViewLoanChecklistList.currentItem);
        var id = wijmoCollectionViewLoanChecklistList.currentEditItem.Id;

        var objLoanCheckList = new Object();
        objLoanCheckList.Remarks = document.getElementById("inputRemarks").value;
        objLoanCheckList.ImageAttachment = document.getElementById("imageDisplay").src.replace(/^data:image\/(png|jpeg);base64,/, "");
        var imageData = JSON.stringify(objLoanCheckList);

        $.ajax({
            url: "/api/loanChecklist/update/" + id,
            type: "PUT",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: imageData,
            statusCode: {
                200: function () {
                    toastr.success("Upload Successful");
                    location.reload();
                },
                404: function (message) {
                    toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404 - Not Found");
                },
                400: function (message) {
                    toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400 - Bad Request");
                },
                500: function (message) {
                    toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500 - Internal Server Error");
                }
            }
        });
    }

    function previewFile() {
        var preview = document.querySelector("img");
        var file = document.querySelector("input[type=file]").files[0];
        var reader = new FileReader();

        reader.onloadend = function () {
            preview.src = reader.result;
            imageDataURL = reader.result;
        }

        if (file) {
            reader.readAsDataURL(file);

        } else {
            preview.src = "";
        }
    }

    function loadChecklist() {
        setTimeout(function () {
            wijmoCollectionViewLoanChecklistList = new wijmo.collections.CollectionView(getDataLoanChecklistList());
            wijmoCollectionViewLoanChecklistList.canFilter = true;

            wijmoGridLoanChecklistList.itemsSource = wijmoCollectionViewLoanChecklistList;
        }, 500)
    }

    function loadPaymentsAndPenalties() {
        setTimeout(function () {
            wijmoGridCollectionListCollectionView = new wijmo.collections.CollectionView(getDataCollectionList());
            wijmoGridCollectionListCollectionView.canFilter = true;

            wijmoGridCollectionListFlexGrid.itemsSource = wijmoGridCollectionListCollectionView;
        }, 500)
    }

    function getDataLoanChecklistList() {
        var loanListObservableArray = new wijmo.collections.ObservableArray;
        var loanId = getURLParameterValue("id");

        $.ajax({
            url: "/api/loanChecklist/list/" + loanId,
            cache: false,
            type: "GET",
            contentType: "application/json; charset=utf-8",
            success: function (results) {
                if (results.length > 0) {
                    for (var i = 0; i < results.length; i++) {
                        loanListObservableArray.push({
                            ButtonEdit: "<button class='btn btn-primary btn-xs btn-block' onclick='buttonClickEditLoanChecklist()'>Edit</button>",
                            Id: results[i]["Id"],
                            CheckList: results[i]["CheckList"],
                            Remarks: results[i]["Remarks"],
                            ImageAttachment: results[i]["ImageAttachment"]
                        });
                    }
                }
            }
        });

        return loanListObservableArray;
    }

    function createWijmoGridLoanChecklistList() {
        wijmoCollectionViewLoanChecklistList = new wijmo.collections.CollectionView(getDataLoanChecklistList());
        wijmoCollectionViewLoanChecklistList.canFilter = true;

        wijmoGridLoanChecklistList = new wijmo.grid.FlexGrid("#wijmoGridLoanChecklistList");
        wijmoGridLoanChecklistList.initialize({
            columns: [
                {
                    "header": "Edit",
                    "binding": "ButtonEdit",
                    "width": 70,
                    "align": "center",
                    "allowResizing": false,
                    "allowSorting": false,
                    "isContentHtml": true
                },
                {
                    "header": "Checklist",
                    "binding": "CheckList",
                    "allowSorting": true,
                    "width": 500
                },
                {
                    "header": "Remarks",
                    "binding": "Remarks",
                    "allowSorting": true,
                    "width": "*"
                }
            ],
            autoGenerateColumns: false,
            itemsSource: wijmoCollectionViewLoanChecklistList,
            isReadOnly: true,
            autoSizeMode: wijmo.grid.AutoSizeMode.Both,
            allowDragging: wijmo.grid.AllowDragging.None,
            selectionMode: wijmo.grid.SelectionMode.Row,
            frozenColumns: 1
        });
    }

    function getURLParameterValue(name) {
        name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

        var regexS = "[\\?&]" + name + "=([^&#]*)";
        var regex = new RegExp(regexS);

        var results = regex.exec(window.location.href);
        if (results == null) {
            return "";
        } else {
            return results[1];
        }
    }

    function getLoanDetail() {
        if (document.location.search.length > 0) {
            var loanId = getURLParameterValue("id");

            $.ajax({
                url: '/api/loan/detail/' + loanId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results != null) {
                        document.getElementById("imageDisplay2").src = "data:image/jpeg;base64," + results.ImageURL;

                        document.getElementById("spanLoanNumber").innerHTML = results.LoanNumber;
                        document.getElementById("spanCustomerName").innerHTML = results.Customer;
                        document.getElementById("spanTerm").innerHTML = results.Term;
                        document.getElementById("inputPrincipalAmount").value = parseFloat(results.PrincipalAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inputInterestPercentage").value = parseFloat(results.InterestPercentage).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inputInterestAmount").value = parseFloat(results.InterestAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inputLoanAmount").value = parseFloat(results.LoanAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inputNetAmount").value = parseFloat(results.NetAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inputAmortizationAmount").value = parseFloat(results.AmortizationAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inputTotalPaidAmount").value = parseFloat(results.PaidAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inputTotalPenaltyAmount").value = parseFloat(results.PenaltyAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inputEndingBalanceAmount").value = parseFloat(results.BalanceAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inputStatus").value = results.Status;

                        if (results.IsClosed) {
                            document.getElementById("buttonClickEdit").disabled = true;
                            document.getElementById("buttonClickApprove").disabled = true;
                            document.getElementById("buttonClickDecline").disabled = true;
                            document.getElementById("buttonClickCloseTransaction").disabled = true;
                            document.getElementById("buttonClickPrint").disabled = true;
                        } else {
                            if (results.IsLocked == true) {
                                if (results.IsApproved == true) {
                                    document.getElementById("buttonClickEdit").disabled = true;
                                    document.getElementById("buttonClickApprove").disabled = true;
                                    document.getElementById("buttonClickDecline").disabled = true;
                                } else if (results.IsDeclined == true) {
                                    document.getElementById("buttonClickEdit").disabled = true;
                                    document.getElementById("buttonClickApprove").disabled = true;
                                    document.getElementById("buttonClickDecline").disabled = true;
                                    document.getElementById("buttonClickPrint").disabled = true;
                                } else {
                                    document.getElementById("buttonClickEdit").disabled = true;
                                    document.getElementById("buttonClickPrint").disabled = true;
                                }
                            } else {
                                document.getElementById("buttonClickPrint").disabled = true;
                            }
                        }
                    } else {
                        alert("No Data");
                        window.location = "/Software/CustomerProfile";
                    }

                    createWijmoGridLoanChecklistList();
                    createWijmoGridCollectionList();
                }
            });
        } else {
            alert("No Id Parameter Value");
            window.location = "/Software/Collection";
        }
    }

    function buttonClickEdit() {
        $("#modalLoanDetailForm").modal({
            show: true,
            backdrop: "static"
        });

        createWijmoComboboxTerm();
        document.getElementById("inputEditPrincipalAmount").value = formatDecimalValues(0);
    }

    function buttonClickUpdateLoan() {
        if (document.location.search.length > 0) {
            var loanId = getURLParameterValue("id");

            var loanObject = new Object();
            loanObject.TermId = wijmoComboboxTerm.selectedValue;
            loanObject.PrincipalAmount = document.getElementById("inputEditPrincipalAmount").value;
            var loanData = JSON.stringify(loanObject);

            $.ajax({
                url: "/api/loan/update/" + loanId,
                type: "PUT",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: loanData,
                statusCode: {
                    200: function (loanId) {
                        toastr.success("Update Successful");

                        setTimeout(function () {
                            location.reload();
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404 - Not Found");
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400 - Bad Request");
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500 - Internal Server Error");
                    }
                }
            });
        } else {
            toastr.error("Invalid URL parameter value.", "Error 400 - Bad Request");
        }
    }

    function createWijmoComboboxTerm() {
        var termObservableArray = new wijmo.collections.ObservableArray();
        $.ajax({
            url: '/api/current/loan/dropdown/list/term',
            cache: false,
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            success: function (results) {
                if (results.length > 0) {
                    for (i = 0; i < results.length; i++) {
                        termObservableArray.push({
                            Id: results[i]["Id"],
                            Term: results[i]["Term"],
                            NumberOfMonths: results[i]["NumberOfMonths"],
                            DefaultInterestId: results[i]["DefaultInterestId"],
                            LimitAmount: results[i]["LimitAmount"]
                        });
                    }
                }

                wijmoComboboxTerm.dispose();
                wijmoComboboxTerm = new wijmo.input.ComboBox('#wijmoComboboxTerm', {
                    placeholder: "Select Term",
                    itemsSource: termObservableArray,
                    displayMemberPath: "Term",
                    selectedValuePath: "Id"
                });
            }
        });
    }

    function buttonClickApprove() {
        $("#modalLoanApproveForm").modal({
            show: true,
            backdrop: "static"
        });
    }

    function buttonClickConfirmApproveLoan() {
        if (document.location.search.length > 0) {
            var loanId = getURLParameterValue("id");

            $.ajax({
                url: "/api/loan/approve/" + loanId,
                type: "PUT",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $("#modalLoanApproveForm").modal("hide");
                        toastr.success("Approve Successful");

                        setTimeout(function () {
                            location.reload();
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404 - Not Found");
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400 - Bad Request");
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500 - Internal Server Error");
                    }
                }
            });
        } else {
            toastr.error("Invalid URL parameter value.", "Error 400 - Bad Request");
        }
    }

    function buttonClickDecline() {
        $("#modalLoanDeclineForm").modal({
            show: true,
            backdrop: "static"
        });
    }

    function buttonClickPrint() {
        var loanId = getURLParameterValue("id");
        window.location = "/PDFRepLoanApplication/PDFRepLoanApplication?loanId=" + loanId;
    }

    function buttonClickConfirmDeclineLoan() {
        if (document.location.search.length > 0) {
            var loanId = getURLParameterValue("id");

            $.ajax({
                url: "/api/loan/decline/" + loanId,
                type: "PUT",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $("#modalLoanDeclineForm").modal("hide");
                        toastr.success("Decline Successful");

                        setTimeout(function () {
                            location.reload();
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404 - Not Found");
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400 - Bad Request");
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500 - Internal Server Error");
                    }
                }
            });
        } else {
            toastr.error("Invalid URL parameter value.", "Error 400 - Bad Request");
        }
    }

    function buttonClickCloseTransaction() {
        $("#modalLoanCloseTransactionForm").modal({
            show: true,
            backdrop: "static"
        });
    }

    function buttonClickConfirmCloseLoan() {
        if (document.location.search.length > 0) {
            var loanId = getURLParameterValue("id");

            var loanObject = new Object();
            loanObject.Remarks = document.getElementById("inputReasonRemarks").value;
            var loanData = JSON.stringify(loanObject);

            $.ajax({
                url: "/api/loan/closeTransaction/" + loanId,
                type: "PUT",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: loanData,
                statusCode: {
                    200: function () {
                        $("#modalLoanCloseTransactionForm").modal("hide");
                        toastr.success("Close Transaction Successful");

                        setTimeout(function () {
                            location.reload();
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404 - Not Found");
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400 - Bad Request");
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500 - Internal Server Error");
                    }
                }
            });
        } else {
            toastr.error("Invalid URL parameter value.", "Error 400 - Bad Request");
        }
    }

    function getDataCollectionList() {
        var collectionListObservableArray = new wijmo.collections.ObservableArray;

        if (document.location.search.length > 0) {
            var loanId = getURLParameterValue("id");

            $.ajax({
                url: "/api/collection/customerPayment/list/" + loanId,
                cache: false,
                type: "GET",
                contentType: "application/json; charset=utf-8",
                success: function (results) {
                    if (results.length > 0) {
                        for (var i = 0; i < results.length; i++) {
                            collectionListObservableArray.push({
                                Id: results[i]["Id"],
                                CollectionNumber: results[i]["CollectionNumber"],
                                CollectionDate: results[i]["CollectionDate"],
                                CustomerId: results[i]["CustomerId"],
                                Customer: results[i]["Customer"],
                                LoanId: results[i]["LoanId"],
                                LoanNumber: results[i]["LoanNumber"],
                                PayTypeId: results[i]["PayTypeId"],
                                PayType: results[i]["PayType"],
                                PaidAmount: results[i]["PaidAmount"],
                                PaidAmountDisplay: parseFloat(results[i]["PaidAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                PenaltyAmount: results[i]["PenaltyAmount"],
                                PenaltyAmountDisplay: parseFloat(results[i]["PenaltyAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Remarks: results[i]["Remarks"],
                                Status: results[i]["Status"],
                                IsLocked: results[i]["IsLocked"],
                            });
                        }
                    }
                }
            });
        }

        return collectionListObservableArray;
    }

    function createWijmoGridCollectionList() {
        wijmoGridCollectionListCollectionView = new wijmo.collections.CollectionView(getDataCollectionList());
        wijmoGridCollectionListCollectionView.canFilter = true;

        wijmoGridCollectionListFlexGrid = new wijmo.grid.FlexGrid("#wijmoGridCollectionListFlexGrid");
        wijmoGridCollectionListFlexGrid.initialize({
            columns: [
                {
                    "header": "Col. No.",
                    "binding": "CollectionNumber",
                    "allowSorting": true,
                    "width": 100
                },
                {
                    "header": "Date",
                    "binding": "CollectionDate",
                    "allowSorting": true,
                    "width": 90
                },
                {
                    "header": "Customer",
                    "binding": "Customer",
                    "allowSorting": true,
                    "width": 200
                },
                {
                    "header": "Loan No.",
                    "binding": "LoanNumber",
                    "allowSorting": true,
                    "width": 100
                },
                {
                    "header": "Pay Type",
                    "binding": "PayType",
                    "allowSorting": true,
                    "width": 100
                },
                {
                    "header": "Paid",
                    "binding": "PaidAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Penalty",
                    "binding": "PenaltyAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Remarks",
                    "binding": "Remarks",
                    "allowSorting": true,
                    "width": "*"
                }
            ],
            autoGenerateColumns: false,
            itemsSource: wijmoGridCollectionListCollectionView,
            isReadOnly: true,
            autoSizeMode: wijmo.grid.AutoSizeMode.Both,
            allowDragging: wijmo.grid.AllowDragging.None,
            selectionMode: wijmo.grid.SelectionMode.Row
        });
    }

    window.onload = function () {
        getLoanDetail();
        wijmoComboboxTerm = new wijmo.input.ComboBox('#wijmoComboboxTerm');
    }
</script>