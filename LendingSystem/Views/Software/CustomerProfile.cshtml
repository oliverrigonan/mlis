<h2>My Loans</h2>

<div>
    <h4>Manage your loan and transactions</h4>
    <hr />

    <h3 id="currentUserFullName"></h3>
    <i class="glyphicon glyphicon-calendar"></i> &nbsp; <span id="currentDateOfBirth"></span><br />
    <i class="glyphicon glyphicon-user"></i> &nbsp; <span id="currentGender"></span><br />
    <i class="glyphicon glyphicon-map-marker"></i> &nbsp; <span id="currentAddress"></span>
    <hr />
    <div class="panel panel-default">
        <div class="panel-heading">
            <button class="btn btn-success" onclick="buttonClickAddLoan()">New Loan</button>
            <button class="btn btn-primary" onclick="buttonClickViewPayments()">View Payments</button>
            <button class="btn btn-primary" onclick="buttonClickPrintLoan()">Print Loan</button>
            <button class="btn btn-primary" onclick="buttonClickPrintLoan()">Terms and Conditions</button>
            <button class="btn btn-warning" onclick="buttonClickCancelLoan()">Cancel</button>
        </div>
        <div class="panel-body">
            <div class="alert alert-info text-center">
                <strong>Empty!</strong> No current loan for this time.
            </div>
        </div>
    </div>

    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#tabLoan" onclick="listLoanDraftsOnclick()">Drafts</a></li>
        <li><a data-toggle="tab" href="#tabHistory" onclick="listLoanHistoryOnclick()">Loan History</a></li>
    </ul>

    <br />

    <div class="tab-content">
        <div id="tabLoan" class="tab-pane fade in active">
            <div id="wijmoGridLoanDraftList"></div>
        </div>
        <div id="tabHistory" class="tab-pane fade">
            <div id="wijmoGridLoanHistoryList"></div>
        </div>
    </div>
</div>

<div class="modal fae" id="modalLoanDetailForm" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="modalTitle">Loan Detail</h4>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label>Principal Amount:</label>
                        <input id="inputPrincipalAmount" class="form-control text-right number input-lg" />
                    </div>
                    <div class="form-group">
                        <label>Term:</label>
                        <div id="wijmoComboboxTerm"></div>
                    </div>
                    <div class="form-group">
                        <label>Previous Balance:</label>
                        <input id="inputPreviousLoanAmount" class="form-control text-right number" readonly />
                    </div>
                </form>
                <div class="alert alert-info">
                    <strong>For your info!</strong> You're previous balance will be deducted to your current loan.
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" id="buttonClickProceedLoan" onclick="buttonClickProceedLoan()">Proceed</button>
                <button class="btn btn-danger" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fae" id="modalLoanDeleteForm" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="modalTitle">Delete Loan</h4>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this loan?
            </div>
            <div class="modal-footer">
                <button class="btn btn-danger" onclick="buttonClickConfirmDeleteLoan()">Delete</button>
                <button class="btn btn-default" data-dismiss="modal">Delete</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var wijmoGridLoanDraftList;
    var wijmoCollectionViewLoanDraftList;
    var wijmoGridLoanHistoryList;
    var wijmoCollectionViewLoanHistoryList;
    var wijmoComboboxTerm;

    function getCurrentUserDetail() {
        $.ajax({
            url: "/api/current/detail",
            cache: false,
            type: "GET",
            contentType: "application/json; charset=utf-8",
            success: function (results) {
                if (results != null) {
                    document.getElementById("currentUserFullName").innerHTML = results.FullName;
                    document.getElementById("currentDateOfBirth").innerHTML = results.BirthDate;
                    document.getElementById("currentGender").innerHTML = results.Gender;
                    document.getElementById("currentAddress").innerHTML = results.Address;
                }

                createWijmoGridLoanDraftList();
                createWijmoGridLoanHistoryList();
            }
        });
    }

    function getDataLoanDraftList() {
        var loanListObservableArray = new wijmo.collections.ObservableArray;

        $.ajax({
            url: "/api/current/loan/list/Draft",
            cache: false,
            type: "GET",
            contentType: "application/json; charset=utf-8",
            success: function (results) {
                if (results.length > 0) {
                    for (var i = 0; i < results.length; i++) {
                        loanListObservableArray.push({
                            ButtonView: "<button class='btn btn-primary btn-xs btn-block' onclick='buttonClickEditLoan()'>Edit</button>",
                            ButtonDelete: "<button class='btn btn-danger btn-xs btn-block' onclick='buttonClickDeleteLoan()'>Delete</button>",
                            Id: results[i]["Id"],
                            LoanNumber: results[i]["LoanNumber"],
                            LoanDate: results[i]["LoanDate"],
                            TermId: results[i]["TermId"],
                            Term: results[i]["Term"],
                            PrincipalAmount: results[i]["PrincipalAmount"],
                            PrincipalAmountDisplay: parseFloat(results[i]["PrincipalAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            InterestId: results[i]["InterestId"],
                            Interest: results[i]["Interest"],
                            InterestPercentage: results[i]["InterestPercentage"],
                            InterestPercentageDisplay: parseFloat(results[i]["InterestPercentage"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            InterestAmount: results[i]["InterestAmount"],
                            InterestAmountDisplay: parseFloat(results[i]["InterestAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            LoanAmount: results[i]["LoanAmount"],
                            LoanAmountDisplay: parseFloat(results[i]["LoanAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            PreviousAmount: results[i]["PreviousAmount"],
                            PreviousAmountDisplay: parseFloat(results[i]["PreviousAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            Amount: results[i]["Amount"],
                            AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            NetAmount: results[i]["NetAmount"],
                            NetAmountDisplay: parseFloat(results[i]["NetAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            AmortizationAmount: results[i]["AmortizationAmount"],
                            AmortizationAmountDisplay: parseFloat(results[i]["AmortizationAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            PaidAmount: results[i]["PaidAmount"],
                            PaidAmountDisplay: parseFloat(results[i]["PaidAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            PenaltyAmount: results[i]["PenaltyAmount"],
                            PenaltyAmountDisplay: parseFloat(results[i]["PenaltyAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            BalanceAmount: results[i]["BalanceAmount"],
                            BalanceAmountDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            Remarks: results[i]["Remarks"],
                            Status: results[i]["Status"]
                        });
                    }
                }
            }
        });

        return loanListObservableArray;
    }

    function createWijmoGridLoanDraftList() {
        wijmoCollectionViewLoanDraftList = new wijmo.collections.CollectionView(getDataLoanDraftList());
        wijmoCollectionViewLoanDraftList.canFilter = true;

        wijmoGridLoanDraftList = new wijmo.grid.FlexGrid("#wijmoGridLoanDraftList");
        wijmoGridLoanDraftList.initialize({
            columns: [
                {
                    "header": "View",
                    "binding": "ButtonView",
                    "width": 70,
                    "align": "center",
                    "allowResizing": false,
                    "allowSorting": false,
                    "isContentHtml": true
                },
                {
                    "header": "Delete",
                    "binding": "ButtonDelete",
                    "width": 70,
                    "align": "center",
                    "allowResizing": false,
                    "allowSorting": false,
                    "isContentHtml": true
                },
                {
                    "header": "Number",
                    "binding": "LoanNumber",
                    "allowSorting": true,
                    "width": 100
                },
                {
                    "header": "Date",
                    "binding": "LoanDate",
                    "allowSorting": true,
                    "width": 90
                },
                {
                    "header": "Term",
                    "binding": "Term",
                    "allowSorting": true,
                    "width": 150
                },
                {
                    "header": "Principal",
                    "binding": "PrincipalAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Interest",
                    "binding": "InterestAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Loan",
                    "binding": "LoanAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Previous",
                    "binding": "PreviousAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Amount",
                    "binding": "AmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Net",
                    "binding": "NetAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Paid",
                    "binding": "PaidAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Penalty",
                    "binding": "PenaltyAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Balance",
                    "binding": "BalanceAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Status",
                    "binding": "Status",
                    "allowSorting": true,
                    "width": 100
                },
                {
                    "header": "Remarks",
                    "binding": "Remarks",
                    "allowSorting": true,
                    "width": 200
                },
            ],
            autoGenerateColumns: false,
            itemsSource: wijmoCollectionViewLoanDraftList,
            isReadOnly: true,
            autoSizeMode: wijmo.grid.AutoSizeMode.Both,
            allowDragging: wijmo.grid.AllowDragging.None,
            selectionMode: wijmo.grid.SelectionMode.Row,
            frozenColumns: 2
        });
    }

    function getDataLoanHistoryList() {
        var loanListObservableArray = new wijmo.collections.ObservableArray;

        $.ajax({
            url: "/api/current/loan/list/History",
            cache: false,
            type: "GET",
            contentType: "application/json; charset=utf-8",
            success: function (results) {
                if (results.length > 0) {
                    for (var i = 0; i < results.length; i++) {
                        loanListObservableArray.push({
                            ButtonView: "<button class='btn btn-primary btn-xs btn-block' onclick='buttonClickViewLoan()'>View</button>",
                            Id: results[i]["Id"],
                            LoanNumber: results[i]["LoanNumber"],
                            LoanDate: results[i]["LoanDate"],
                            TermId: results[i]["TermId"],
                            Term: results[i]["Term"],
                            PrincipalAmount: results[i]["PrincipalAmount"],
                            PrincipalAmountDisplay: parseFloat(results[i]["PrincipalAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            InterestId: results[i]["InterestId"],
                            Interest: results[i]["Interest"],
                            InterestPercentage: results[i]["InterestPercentage"],
                            InterestPercentageDisplay: parseFloat(results[i]["InterestPercentage"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            InterestAmount: results[i]["InterestAmount"],
                            InterestAmountDisplay: parseFloat(results[i]["InterestAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            LoanAmount: results[i]["LoanAmount"],
                            LoanAmountDisplay: parseFloat(results[i]["LoanAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            PreviousAmount: results[i]["PreviousAmount"],
                            PreviousAmountDisplay: parseFloat(results[i]["PreviousAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            Amount: results[i]["Amount"],
                            AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            NetAmount: results[i]["NetAmount"],
                            NetAmountDisplay: parseFloat(results[i]["NetAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            AmortizationAmount: results[i]["AmortizationAmount"],
                            AmortizationAmountDisplay: parseFloat(results[i]["AmortizationAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            PaidAmount: results[i]["PaidAmount"],
                            PaidAmountDisplay: parseFloat(results[i]["PaidAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            PenaltyAmount: results[i]["PenaltyAmount"],
                            PenaltyAmountDisplay: parseFloat(results[i]["PenaltyAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            BalanceAmount: results[i]["BalanceAmount"],
                            BalanceAmountDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            Remarks: results[i]["Remarks"],
                            Status: results[i]["Status"]
                        });
                    }
                }
            }
        });

        return loanListObservableArray;
    }

    function createWijmoGridLoanHistoryList() {
        wijmoCollectionViewLoanHistoryList = new wijmo.collections.CollectionView(getDataLoanHistoryList());
        wijmoCollectionViewLoanHistoryList.canFilter = true;

        wijmoGridLoanHistoryList = new wijmo.grid.FlexGrid("#wijmoGridLoanHistoryList");
        wijmoGridLoanHistoryList.initialize({
            columns: [
                {
                    "header": "View",
                    "binding": "ButtonView",
                    "width": 70,
                    "align": "center",
                    "allowResizing": false,
                    "allowSorting": false,
                    "isContentHtml": true
                },
                {
                    "header": "Number",
                    "binding": "LoanNumber",
                    "allowSorting": true,
                    "width": 100
                },
                {
                    "header": "Date",
                    "binding": "LoanDate",
                    "allowSorting": true,
                    "width": 90
                },
                {
                    "header": "Term",
                    "binding": "Term",
                    "allowSorting": true,
                    "width": 150
                },
                {
                    "header": "Principal",
                    "binding": "PrincipalAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Interest",
                    "binding": "InterestAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Loan",
                    "binding": "LoanAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Previous",
                    "binding": "PreviousAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Amount",
                    "binding": "AmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Net",
                    "binding": "NetAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Paid",
                    "binding": "PaidAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Penalty",
                    "binding": "PenaltyAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Balance",
                    "binding": "BalanceAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Status",
                    "binding": "Status",
                    "allowSorting": true,
                    "width": 100
                },
                {
                    "header": "Remarks",
                    "binding": "Remarks",
                    "allowSorting": true,
                    "width": 200
                },
            ],
            autoGenerateColumns: false,
            itemsSource: wijmoCollectionViewLoanHistoryList,
            isReadOnly: true,
            autoSizeMode: wijmo.grid.AutoSizeMode.Both,
            allowDragging: wijmo.grid.AllowDragging.None,
            selectionMode: wijmo.grid.SelectionMode.Row,
            frozenColumns: 1
        });
    }

    function buttonClickAddLoan() {
        document.getElementById("modalTitle").innerHTML = "Apply Loan";

        $("#modalLoanDetailForm").modal({
            show: true,
            backdrop: "static"
        });

        createWijmoComboboxTerm();
        document.getElementById("inputPrincipalAmount").value = formatDecimalValues(0);
    }

    function buttonClickEditLoan() {
        document.getElementById("modalTitle").innerHTML = "Edit Loan";

        $("#modalLoanDetailForm").modal({
            show: true,
            backdrop: "static"
        });

        wijmoCollectionViewLoanDraftList.editItem(wijmoCollectionViewLoanDraftList.currentItem);
        var currentDraft = wijmoCollectionViewLoanDraftList.currentEditItem;

        createWijmoComboboxTerm();
        document.getElementById("inputPrincipalAmount").value = formatDecimalValues(currentDraft.PrincipalAmount);
        document.getElementById("inputPreviousLoanAmount").value = formatDecimalValues(currentDraft.PreviousAmount);
    }

    function buttonClickProceedLoan() {
        var loanObject = new Object();
        loanObject.TermId = wijmoComboboxTerm.selectedValue;
        loanObject.PrincipalAmount = document.getElementById("inputPrincipalAmount").value;
        var loanData = JSON.stringify(loanObject);

        $.ajax({
            url: "/api/current/loan/apply",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: loanData,
            statusCode: {
                200: function () {
                    wijmoCollectionViewLoanDraftList = new wijmo.collections.CollectionView(getDataLoanDraftList());
                    wijmoCollectionViewLoanDraftList.canFilter = true;
                    wijmoGridLoanDraftList.itemsSource = wijmoCollectionViewLoanDraftList;
                    $("#modalLoanDetailForm").modal("hide");
                    toastr.success("Save Successful");
                },
                404: function (message) {
                    toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404 - Not Found");
                },
                400: function (message) {
                    toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400 - Bad Request");
                },
                500: function (message) {
                    toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500 - Internal Server Error");
                }
            }
        });
    }

    function buttonClickDeleteLoan() {
        $("#modalLoanDeleteForm").modal({
            show: true,
            backdrop: "static"
        });
    }

    function buttonClickConfirmDeleteLoan() {
        wijmoCollectionViewLoanDraftList.editItem(wijmoCollectionViewLoanDraftList.currentItem);
        var id = wijmoCollectionViewLoanDraftList.currentEditItem.Id;

        $.ajax({
            url: "/api/current/loan/delete/" + id,
            type: "DELETE",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            statusCode: {
                200: function () {
                    wijmoCollectionViewLoanDraftList = new wijmo.collections.CollectionView(getDataLoanDraftList());
                    wijmoCollectionViewLoanDraftList.canFilter = true;
                    wijmoGridLoanDraftList.itemsSource = wijmoCollectionViewLoanDraftList;
                    $("#modalLoanDeleteForm").modal("hide");
                    toastr.success("Delete Successful");
                },
                404: function (message) {
                    $("#modalLoanDeleteForm").modal("hide");
                    toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404 - Not Found");
                },
                400: function (message) {
                    $("#modalLoanDeleteForm").modal("hide");
                    toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400 - Bad Request");
                },
                500: function (message) {
                    $("#modalLoanDeleteForm").modal("hide");
                    toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500 - Internal Server Error");
                }
            }
        });
    }

    function createWijmoComboboxTerm() {
        var termObservableArray = new wijmo.collections.ObservableArray();
        $.ajax({
            url: '/api/current/loan/dropdown/list/term',
            cache: false,
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            success: function (results) {
                if (results.length > 0) {
                    for (i = 0; i < results.length; i++) {
                        termObservableArray.push({
                            Id: results[i]["Id"],
                            Term: results[i]["Term"],
                            NumberOfMonths: results[i]["NumberOfMonths"],
                            DefaultInterestId: results[i]["DefaultInterestId"],
                            LimitAmount: results[i]["LimitAmount"]
                        });
                    }
                }

                wijmoComboboxTerm.dispose();
                wijmoComboboxTerm = new wijmo.input.ComboBox('#wijmoComboboxTerm', {
                    placeholder: "Select Term",
                    itemsSource: termObservableArray,
                    displayMemberPath: "Term",
                    selectedValuePath: "Id"
                });
            }
        });
    }

    function listLoanDraftsOnclick() {
        setTimeout(function () {
            wijmoCollectionViewLoanDraftList = new wijmo.collections.CollectionView(getDataLoanDraftList());
            wijmoCollectionViewLoanDraftList.canFilter = true;
            wijmoGridLoanDraftList.itemsSource = wijmoCollectionViewLoanDraftList;
        }, 500);
    }

    function listLoanHistoryOnclick() {
        setTimeout(function () {
            wijmoCollectionViewLoanHistoryList = new wijmo.collections.CollectionView(getDataLoanHistoryList());
            wijmoCollectionViewLoanHistoryList.canFilter = true;
            wijmoGridLoanHistoryList.itemsSource = wijmoCollectionViewLoanHistoryList;
        }, 500);
    }

    window.onload = function () {
        getCurrentUserDetail();
        wijmoComboboxTerm = new wijmo.input.ComboBox('#wijmoComboboxTerm');
    }
</script>