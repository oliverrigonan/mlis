<h2 id="currentUserFullName"></h2>

<div>
    <h4>Profile</h4>
    <hr />

    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#tabLoan">Loan</a></li>
        <li><a data-toggle="tab" href="#tabPayments">Payments</a></li>
        <li><a data-toggle="tab" href="#tabNotification">Notifications</a></li>
    </ul>

    <br />

    <div class="tab-content">
        <div id="tabLoan" class="tab-pane fade in active">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <button class="btn btn-primary" onclick="buttonClickAddLoan()">Apply</button>
                </div>
                <div class="panel-body">
                    <div id="wijmoGridLoanList"></div>
                </div>
            </div>
        </div>
        <div id="tabPayments" class="tab-pane fade">

        </div>
        <div id="tabNotification" class="tab-pane fade">

        </div>
    </div>
</div>

<div class="modal fae" id="modalLoanDetailForm" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="modalTitle">Loan Detail</h4>
            </div>
            <div class="modal-body">
                <dl class="dl-horizontal">
                    <dt>
                        Principal Amount
                    </dt>
                    <dd>
                        <input id="inputPrincipalAmount" class="form-control text-right number" onkeyup="computeAmouont()" />
                    </dd>
                    <dt>
                        Term
                    </dt>
                    <dd>
                        <div id="wijmoComboboxTerm"></div>
                    </dd>
                    <dt>
                        No. of Days
                    </dt>
                    <dd>
                        <input id="inputNumberOfDays" class="form-control text-right" readonly />
                    </dd>
                    <dt>
                        Interest
                    </dt>
                    <dd>
                        <div id="wijmoComboboxInterest"></div>
                    </dd>
                    <dt>
                        Interest Rate
                    </dt>
                    <dd>
                        <input id="inputInterestPercentage" class="form-control text-right number" readonly />
                    </dd>
                    <dt>
                        Interest Amount
                    </dt>
                    <dd>
                        <input id="inputInterestAmount" class="form-control text-right number" readonly />
                    </dd>
                    <dt>
                        Advance Interest
                    </dt>
                    <dd>
                        <input id="inputIsAdvanceInterestDeduction" type="checkbox"  onclick="computeAmouont();"/>
                    </dd>
                    <dt>
                        Loan Amount
                    </dt>
                    <dd>
                        <input id="inputLoanAmount" class="form-control text-right number" readonly />
                    </dd>
                    <dt>
                        Previous Balance
                    </dt>
                    <dd>
                        <input id="inputPreviousLoanAmount" class="form-control text-right number" readonly />
                    </dd>
                    <dt>
                        Collectible
                    </dt>
                    <dd>
                        <input id="inputCollectibleAmount" class="form-control text-right number" readonly />
                    </dd>
                    <dt>
                        Claim
                    </dt>
                    <dd>
                        <input id="inputClaimAmount" class="form-control text-right number" readonly />
                    </dd>
                    <dt>
                        Remarks
                    </dt>
                    <dd>
                        <textarea id="inputLoanRemarks" class="form-control" rows="7"></textarea>
                    </dd>
                </dl>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" id="buttonClickApplyLoan" onclick="buttonClickApplyLoan()">Apply</button>
                <button class="btn btn-danger" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fae" id="modalLoanCancelForm" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="modalTitle">Delete Loan</h4>
            </div>
            <div class="modal-body">
                Are you sure you want to cancel this loan?
            </div>
            <div class="modal-footer">
                <button class="btn btn-warning" onclick="buttonClickConfirmCancelLoan()">Cancel</button>
                <button class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var wijmoGridLoanList;
    var wijmoCollectionViewLoanList;
    var wijmoComboboxTerm;
    var wijmoComboboxInterest;
    var defaultInterestId = 0;

    function getCurrentUserDetail() {
        $.ajax({
            url: "/api/current/detail",
            cache: false,
            type: "GET",
            contentType: "application/json; charset=utf-8",
            success: function (results) {
                if (results != null) {
                    document.getElementById("currentUserFullName").innerHTML = results.FullName;
                }

                createWijmoGridLoanList();
            }
        });
    }

    function getDataLoanList() {
        var loanListObservableArray = new wijmo.collections.ObservableArray;

        $.ajax({
            url: "/api/current/loan/history/list",
            cache: false,
            type: "GET",
            contentType: "application/json; charset=utf-8",
            success: function (results) {
                if (results.length > 0) {
                    for (var i = 0; i < results.length; i++) {
                        loanListObservableArray.push({
                            ButtonView: "<button class='btn btn-primary btn-xs btn-block' onclick='buttonClickViewLoan()'>View</button>",
                            ButtonCancel: "<button class='btn btn-warning btn-xs btn-block' onclick='buttonClickCancelLoan()'>Cancel</button>",
                            Id: results[i]["Id"],
                            LoanNumber: results[i]["LoanNumber"],
                            LoanDate: results[i]["LoanDate"],
                            TermId: results[i]["TermId"],
                            Term: results[i]["Term"],
                            PrincipalAmount: results[i]["PrincipalAmount"],
                            PrincipalAmountDisplay: parseFloat(results[i]["PrincipalAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            InterestId: results[i]["InterestId"],
                            Interest: results[i]["Interest"],
                            InterestPercentage: results[i]["InterestPercentage"],
                            InterestPercentageDisplay: parseFloat(results[i]["InterestPercentage"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            InterestAmount: results[i]["InterestAmount"],
                            InterestAmountDisplay: parseFloat(results[i]["InterestAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            LoanAmount: results[i]["LoanAmount"],
                            LoanAmountDisplay: parseFloat(results[i]["LoanAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            PreviousBalanceAmount: results[i]["PreviousBalanceAmount"],
                            PreviousBalanceAmountDisplay: parseFloat(results[i]["PreviousBalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            CollectibleAmount: results[i]["CollectibleAmount"],
                            CollectibleAmountDisplay: parseFloat(results[i]["CollectibleAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            ClaimAmount: results[i]["ClaimAmount"],
                            ClaimAmountDisplay: parseFloat(results[i]["ClaimAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            PaidAmount: results[i]["PaidAmount"],
                            PaidAmountDisplay: parseFloat(results[i]["PaidAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            PenaltyAmount: results[i]["PenaltyAmount"],
                            PenaltyAmountDisplay: parseFloat(results[i]["PenaltyAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            BalanceAmount: results[i]["BalanceAmount"],
                            BalanceAmountDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            IsAdvanceInterestDeduction: results[i]["IsAdvanceInterestDeduction"],
                            Remarks: results[i]["Remarks"],
                            Status: results[i]["Status"]
                        });
                    }
                }
            }
        });

        return loanListObservableArray;
    }

    function createWijmoGridLoanList() {
        wijmoCollectionViewLoanList = new wijmo.collections.CollectionView(getDataLoanList());
        wijmoCollectionViewLoanList.canFilter = true;

        wijmoGridLoanList = new wijmo.grid.FlexGrid("#wijmoGridLoanList");
        wijmoGridLoanList.initialize({
            columns: [
                {
                    "header": "View",
                    "binding": "ButtonView",
                    "width": 70,
                    "align": "center",
                    "allowResizing": false,
                    "allowSorting": false,
                    "isContentHtml": true
                },
                {
                    "header": "Cancel",
                    "binding": "ButtonCancel",
                    "width": 70,
                    "align": "center",
                    "allowResizing": false,
                    "allowSorting": false,
                    "isContentHtml": true
                },
                {
                    "header": "Number",
                    "binding": "LoanNumber",
                    "allowSorting": true,
                    "width": 100
                },
                {
                    "header": "Date",
                    "binding": "LoanDate",
                    "allowSorting": true,
                    "width": 90
                },
                {
                    "header": "Term",
                    "binding": "Term",
                    "allowSorting": true,
                    "width": 150
                },
                {
                    "header": "Principal",
                    "binding": "PrincipalAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Interest",
                    "binding": "Interest",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Rate",
                    "binding": "InterestPercentageDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Interest Amount",
                    "binding": "InterestAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "A",
                    "binding": "IsAdvanceInterestDeduction",
                    "allowSorting": true,
                    "width": 50
                },
                {
                    "header": "Loan",
                    "binding": "LoanAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Previous",
                    "binding": "PreviousBalanceAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Collectible",
                    "binding": "CollectibleAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Claim",
                    "binding": "ClaimAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Paid",
                    "binding": "PaidAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Penalty",
                    "binding": "PenaltyAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Balance",
                    "binding": "BalanceAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Status",
                    "binding": "Status",
                    "allowSorting": true,
                    "width": 100
                },
                {
                    "header": "Remarks",
                    "binding": "Remarks",
                    "allowSorting": true,
                    "width": 200
                },
            ],
            autoGenerateColumns: false,
            itemsSource: wijmoCollectionViewLoanList,
            isReadOnly: true,
            autoSizeMode: wijmo.grid.AutoSizeMode.Both,
            allowDragging: wijmo.grid.AllowDragging.None,
            selectionMode: wijmo.grid.SelectionMode.Row,
            frozenColumns: 2
        });
    }

    function buttonClickAddLoan() {
        document.getElementById("modalTitle").innerHTML = "Apply Loan";

        $("#modalLoanDetailForm").modal({
            show: true,
            backdrop: "static"
        });

        loanId = 0;
        createWijmoComboboxTerm(false);
        document.getElementById("inputPrincipalAmount").value = formatDecimalValues(0);
        document.getElementById("inputPreviousLoanAmount").value = formatDecimalValues(0); 
        document.getElementById("inputLoanRemarks").value = "";
        computeAmouont();

        document.getElementById("inputPrincipalAmount").disabled = false;
        document.getElementById("inputIsAdvanceInterestDeduction").disabled = false;
        document.getElementById("inputLoanRemarks").disabled = false;

        document.getElementById("buttonClickApplyLoan").style.display = "";
    }

    function buttonClickViewLoan() {
        document.getElementById("modalTitle").innerHTML = "View Loan";

        $("#modalLoanDetailForm").modal({
            show: true,
            backdrop: "static"
        });

        createWijmoComboboxTerm(true);

        wijmoCollectionViewLoanList.editItem(wijmoCollectionViewLoanList.currentItem);
        var currentLoan = wijmoCollectionViewLoanList.currentEditItem;
        wijmoComboboxTerm.selectedValue = currentLoan.TermId;
        document.getElementById("inputNumberOfDays").value = formatDecimalValues(currentLoan.TermNumberOfDays);
        document.getElementById("inputPrincipalAmount").value = formatDecimalValues(currentLoan.PrincipalAmount);
        wijmoComboboxInterest.selectedValue = currentLoan.InterestId;
        document.getElementById("inputInterestPercentage").value = formatDecimalValues(currentLoan.InterestPercentage);
        document.getElementById("inputInterestAmount").value = formatDecimalValues(currentLoan.InterestAmount);
        document.getElementById("inputLoanAmount").value = formatDecimalValues(currentLoan.LoanAmount);
        document.getElementById("inputPreviousLoanAmount").value = formatDecimalValues(currentLoan.PreviousBalanceAmount);
        document.getElementById("inputCollectibleAmount").value = formatDecimalValues(currentLoan.CollectibleAmount);
        document.getElementById("inputClaimAmount").value = formatDecimalValues(currentLoan.ClaimAmount);
        document.getElementById("inputIsAdvanceInterestDeduction").checked = currentLoan.IsAdvanceInterestDeduction;
        document.getElementById("inputLoanRemarks").value = currentLoan.Remarks;

        document.getElementById("inputPrincipalAmount").disabled = true;
        document.getElementById("inputIsAdvanceInterestDeduction").disabled = true;
        document.getElementById("inputLoanRemarks").disabled = true;

        document.getElementById("buttonClickApplyLoan").style.display = "none";

    }

    function buttonClickApplyLoan() {
        var loanObject = new Object();
        loanObject.TermId = wijmoComboboxTerm.selectedValue;
        loanObject.TermNumberOfDays = document.getElementById("inputNumberOfDays").value;
        loanObject.PrincipalAmount = document.getElementById("inputPrincipalAmount").value;
        loanObject.InterestId = wijmoComboboxInterest.selectedValue;
        loanObject.InterestPercentage = document.getElementById("inputInterestPercentage").value;
        loanObject.InterestAmount = document.getElementById("inputInterestAmount").value;
        loanObject.LoanAmount = document.getElementById("inputLoanAmount").value;
        loanObject.PreviousBalanceAmount = document.getElementById("inputPreviousLoanAmount").value;
        loanObject.CollectibleAmount = document.getElementById("inputCollectibleAmount").value;
        loanObject.ClaimAmount = document.getElementById("inputClaimAmount").value;
        loanObject.IsAdvanceInterestDeduction = document.getElementById("inputIsAdvanceInterestDeduction").checked;
        loanObject.Remarks = document.getElementById("inputLoanRemarks").value;
        var loanData = JSON.stringify(loanObject);

        $.ajax({
            url: "/api/current/loan/apply",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: loanData,
            statusCode: {
                200: function () {
                    wijmoCollectionViewLoanList = new wijmo.collections.CollectionView(getDataLoanList());
                    wijmoCollectionViewLoanList.canFilter = true;
                    wijmoGridLoanList.itemsSource = wijmoCollectionViewLoanList;
                    $("#modalLoanDetailForm").modal("hide");
                    toastr.success("Save Successful");
                },
                404: function (message) {
                    $("#modalLoanDetailForm").modal("hide");
                    toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404 - Not Found");
                },
                400: function (message) {
                    $("#modalLoanDetailForm").modal("hide");
                    toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400 - Bad Request");
                },
                500: function (message) {
                    $("#modalLoanDetailForm").modal("hide");
                    toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500 - Internal Server Error");
                }
            }
        });
    }

    function buttonClickCancelLoan() {
        $("#modalLoanCancelForm").modal({
            show: true,
            backdrop: "static"
        });
    }

    function buttonClickConfirmCancelLoan() {
        wijmoCollectionViewLoanList.editItem(wijmoCollectionViewLoanList.currentItem);
        var id = wijmoCollectionViewLoanList.currentEditItem.Id;

        $.ajax({
            url: "/api/current/loan/cancel/" + id,
            type: "DELETE",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            statusCode: {
                200: function () {
                    wijmoCollectionViewLoanList = new wijmo.collections.CollectionView(getDataLoanList());
                    wijmoCollectionViewLoanList.canFilter = true;
                    wijmoGridLoanList.itemsSource = wijmoCollectionViewLoanList;
                    $("#modalLoanCancelForm").modal("hide");
                    toastr.success("Cancel Successful");
                },
                404: function (message) {
                    $("#modalLoanCancelForm").modal("hide");
                    toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404 - Not Found");
                },
                400: function (message) {
                    $("#modalLoanCancelForm").modal("hide");
                    toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400 - Bad Request");
                },
                500: function (message) {
                    $("#modalLoanCancelForm").modal("hide");
                    toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500 - Internal Server Error");
                }
            }
        });
    }

    function createWijmoComboboxTerm(isDisalbed) {
        var termObservableArray = new wijmo.collections.ObservableArray();
        $.ajax({
            url: '/api/current/loan/dropdown/list/term',
            cache: false,
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            success: function (results) {
                if (results.length > 0) {
                    for (i = 0; i < results.length; i++) {
                        termObservableArray.push({
                            Id: results[i]["Id"],
                            Term: results[i]["Term"],
                            NumberOfDays: results[i]["NumberOfDays"],
                            DefaultInterestId: results[i]["DefaultInterestId"]
                        });
                    }
                }

                wijmoComboboxTerm.dispose();
                wijmoComboboxTerm = new wijmo.input.ComboBox('#wijmoComboboxTerm', {
                    disabled: isDisalbed,
                    placeholder: "Select Term",
                    itemsSource: termObservableArray,
                    displayMemberPath: "Term",
                    selectedValuePath: "Id",
                    onSelectedIndexChanged: function () {
                        document.getElementById("inputNumberOfDays").value = this.selectedItem["NumberOfDays"];
                        defaultInterestId = this.selectedItem["DefaultInterestId"];
                        createWijmoComboboxInterest();
                    }
                });

                document.getElementById("inputNumberOfDays").value = wijmoComboboxTerm.selectedItem["NumberOfDays"];
                defaultInterestId = wijmoComboboxTerm.selectedItem["DefaultInterestId"];
                createWijmoComboboxInterest();
            }
        });
    }

    function createWijmoComboboxInterest() {
        var interestObservableArray = new wijmo.collections.ObservableArray();
        $.ajax({
            url: '/api/current/loan/dropdown/list/interest',
            cache: false,
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            success: function (results) {
                if (results.length > 0) {
                    for (i = 0; i < results.length; i++) {
                        interestObservableArray.push({
                            Id: results[i]["Id"],
                            Interest: results[i]["Interest"],
                            Percentage: results[i]["Percentage"]
                        });
                    }
                }

                wijmoComboboxInterest.dispose();
                wijmoComboboxInterest = new wijmo.input.ComboBox('#wijmoComboboxInterest', {
                    disabled: true,
                    isEditable: false,
                    placeholder: "Select Interest",
                    itemsSource: interestObservableArray,
                    displayMemberPath: "Interest",
                    selectedValuePath: "Id",
                    selectedValue: defaultInterestId,
                    onSelectedIndexChanged: function () {
                        document.getElementById("inputInterestPercentage").value = formatDecimalValues(this.selectedItem["Percentage"]);
                    }
                });

                document.getElementById("inputInterestPercentage").value = formatDecimalValues(wijmoComboboxInterest.selectedItem["Percentage"]);
                computeAmouont();
            }
        });
    }

    function computeAmouont() {
        var principalAmount = parseFloat(document.getElementById('inputPrincipalAmount').value.replace(/\,/g, ''));
        var interestRate = parseFloat(document.getElementById('inputInterestPercentage').value.replace(/\,/g, ''));
        var isAdvanceInterestDeduction = document.getElementById('inputIsAdvanceInterestDeduction').checked;

        var interestAmount = formatDecimalValues(principalAmount * (interestRate / 100));
        document.getElementById('inputInterestAmount').value = interestAmount;

        var loanAmount = formatDecimalValues(principalAmount + parseFloat(interestAmount.replace(/\,/g, '')));
        document.getElementById('inputLoanAmount').value = loanAmount;

        var previousBalanceAmount = parseFloat(document.getElementById('inputPreviousLoanAmount').value.replace(/\,/g, ''));

        var collectibleAmount = formatDecimalValues(parseFloat(loanAmount.replace(/\,/g, '')) - previousBalanceAmount);
        var claimAmount = formatDecimalValues(principalAmount);

        if (isAdvanceInterestDeduction == true) {
            collectibleAmount = formatDecimalValues(parseFloat(collectibleAmount.replace(/\,/g, '')) - parseFloat(interestAmount.replace(/\,/g, '')));
            claimAmount = formatDecimalValues(principalAmount - parseFloat(interestAmount.replace(/\,/g, '')));
        }

        document.getElementById('inputCollectibleAmount').value = collectibleAmount;
        document.getElementById('inputClaimAmount').value = claimAmount;
    }

    window.onload = function () {
        getCurrentUserDetail();
        wijmoComboboxTerm = new wijmo.input.ComboBox('#wijmoComboboxTerm');
        wijmoComboboxInterest = new wijmo.input.ComboBox('#wijmoComboboxInterest');
    }
</script>