<h2>Reports</h2>
<div>
    <h4>Generate your reports</h4>
    <hr />

    <div class="panel panel-default">
        <div class="panel-heading">
            <a href="/Software" class="btn btn-default">Back</a>
        </div>
    </div>

    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#tabLoanDetailReport" onclick="tabLoanDetailReportClick()">Loan Detail Report</a></li>
        <li><a data-toggle="tab" href="#tabCollectionDetailReport" onclick="tabCollectionDetailReportClick()">Collection Detail Report</a></li>
    </ul>

    <br />

    <div class="row">
        <div class="col-md-3">
            <div class="panel panel-default">
                <div class="panel-heading">
                    Filters
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <label>Date Start</label>
                        <div id="wijmoInputDateStartDate"></div>
                    </div>
                    <div class="form-group">
                        <label>Date End</label>
                        <div id="wijmoInputDateEndDate"></div>
                    </div>
                    <div class="form-group">
                        <label>Filter</label>
                        <input class="form-control" id="filterText" placeholder="Filter text" />
                    </div>
                </div>
                <div class="panel-footer">
                    <button class="btn btn-success btn-block" onclick="buttonGetData()">Generate</button>
                    <button class="btn btn-success btn-block" onclick="buttonDownload()">Export</button>
                </div>
            </div>
        </div>
        <div class="col-md-9">
            <div class="tab-content">
                <div id="tabLoanDetailReport" class="tab-pane fade in active">
                    <div id="wijmoLoanListFlexGrid"></div>
                </div>
                <div id="tabCollectionDetailReport" class="tab-pane fade">
                    <div id="wijmoCollectionListFlexGrid"></div>
                </div>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
    var wijmoInputDateStartDate;
    var wijmoInputDateEndDate;

    var wijmoLoanListCollectionView;
    var wijmoLoanListFlexGrid;

    var wijmoCollectionListCollectionView;
    var wijmoCollectionListFlexGrid;

    function getDataLoanList() {
        var loanListObservableArray = new wijmo.collections.ObservableArray;

        var startDate = wijmoInputDateStartDate.value.toLocaleDateString().replace(/\//g, '-');
        var endDate = wijmoInputDateEndDate.value.toLocaleDateString().replace(/\//g, '-');
        var filterText = document.getElementById("filterText").value;

        $.ajax({
            url: "/api/reports/loanDetailReport/list/" + startDate + "/ " + endDate + "?filterText=" + filterText,
            cache: false,
            type: "GET",
            contentType: "application/json; charset=utf-8",
            success: function (results) {
                if (results.length > 0) {
                    for (var i = 0; i < results.length; i++) {
                        loanListObservableArray.push({
                            Id: results[i]["Id"],
                            LoanNumber: results[i]["LoanNumber"],
                            LoanDate: results[i]["LoanDate"],
                            CustomerId: results[i]["CustomerId"],
                            Customer: results[i]["Customer"],
                            TermId: results[i]["TermId"],
                            Term: results[i]["Term"],
                            PrincipalAmount: results[i]["PrincipalAmount"],
                            PrincipalAmountDisplay: parseFloat(results[i]["PrincipalAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            InterestId: results[i]["InterestId"],
                            Interest: results[i]["Interest"],
                            InterestPercentage: results[i]["InterestPercentage"],
                            InterestPercentageDisplay: parseFloat(results[i]["InterestPercentage"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            InterestAmount: results[i]["InterestAmount"],
                            InterestAmountDisplay: parseFloat(results[i]["InterestAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            LoanAmount: results[i]["LoanAmount"],
                            LoanAmountDisplay: parseFloat(results[i]["LoanAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            NetAmount: results[i]["NetAmount"],
                            NetAmountDisplay: parseFloat(results[i]["NetAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            AmortizationAmount: results[i]["AmortizationAmount"],
                            AmortizationAmountDisplay: parseFloat(results[i]["AmortizationAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            PaidAmount: results[i]["PaidAmount"],
                            PaidAmountDisplay: parseFloat(results[i]["PaidAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            PenaltyAmount: results[i]["PenaltyAmount"],
                            PenaltyAmountDisplay: parseFloat(results[i]["PenaltyAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            BalanceAmount: results[i]["BalanceAmount"],
                            BalanceAmountDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            Remarks: results[i]["Remarks"],
                            Status: results[i]["Status"],
                            IsLocked: results[i]["IsLocked"]
                        });
                    }
                }
            }
        });

        return loanListObservableArray;
    }

    function createWijmoGridLoanList() {
        wijmoLoanListCollectionView = new wijmo.collections.CollectionView(getDataLoanList());
        wijmoLoanListCollectionView.canFilter = true;

        wijmoLoanListFlexGrid = new wijmo.grid.FlexGrid("#wijmoLoanListFlexGrid");
        wijmoLoanListFlexGrid.initialize({
            columns: [
                {
                    "header": "Loan No.",
                    "binding": "LoanNumber",
                    "allowSorting": true,
                    "width": 100
                },
                {
                    "header": "Date",
                    "binding": "LoanDate",
                    "allowSorting": true,
                    "width": 90
                },
                {
                    "header": "Term",
                    "binding": "Term",
                    "allowSorting": true,
                    "width": 150
                },
                {
                    "header": "Principal",
                    "binding": "PrincipalAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Interest",
                    "binding": "InterestAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Loan",
                    "binding": "LoanAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Net",
                    "binding": "NetAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Paid",
                    "binding": "PaidAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Status",
                    "binding": "Status",
                    "allowSorting": true,
                    "width": 100
                }
            ],
            autoGenerateColumns: false,
            itemsSource: wijmoLoanListCollectionView,
            isReadOnly: true,
            autoSizeMode: wijmo.grid.AutoSizeMode.Both,
            allowDragging: wijmo.grid.AllowDragging.None,
            selectionMode: wijmo.grid.SelectionMode.Row
        });
    }

    function getDataCollectionList() {
        var collectionListObservableArray = new wijmo.collections.ObservableArray;

        var startDate = wijmoInputDateStartDate.value.toLocaleDateString().replace(/\//g, '-');
        var endDate = wijmoInputDateEndDate.value.toLocaleDateString().replace(/\//g, '-');
        var filterText = document.getElementById("filterText").value;

        $.ajax({
            url: "/api/reports/collectionDetailReport/list/" + startDate + "/ " + endDate + "?filterText=" + filterText,
            cache: false,
            type: "GET",
            contentType: "application/json; charset=utf-8",
            success: function (results) {
                if (results.length > 0) {
                    for (var i = 0; i < results.length; i++) {
                        collectionListObservableArray.push({
                            Id: results[i]["Id"],
                            CollectionNumber: results[i]["CollectionNumber"],
                            CollectionDate: results[i]["CollectionDate"],
                            CustomerId: results[i]["CustomerId"],
                            Customer: results[i]["Customer"],
                            LoanId: results[i]["LoanId"],
                            LoanNumber: results[i]["LoanNumber"],
                            PayTypeId: results[i]["PayTypeId"],
                            PayType: results[i]["PayType"],
                            PaidAmount: results[i]["PaidAmount"],
                            PaidAmountDisplay: parseFloat(results[i]["PaidAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            PenaltyAmount: results[i]["PenaltyAmount"],
                            PenaltyAmountDisplay: parseFloat(results[i]["PenaltyAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            Remarks: results[i]["Remarks"],
                            Status: results[i]["Status"],
                            IsLocked: results[i]["IsLocked"]
                        });
                    }
                }
            }
        });

        return collectionListObservableArray;
    }

    function createWijmoGridCollectionList() {
        wijmoCollectionListCollectionView = new wijmo.collections.CollectionView(getDataCollectionList());
        wijmoCollectionListCollectionView.canFilter = true;

        wijmoCollectionListFlexGrid = new wijmo.grid.FlexGrid("#wijmoCollectionListFlexGrid");
        wijmoCollectionListFlexGrid.initialize({
            columns: [
                {
                    "header": "Col. No.",
                    "binding": "CollectionNumber",
                    "allowSorting": true,
                    "width": 100
                },
                {
                    "header": "Date",
                    "binding": "CollectionDate",
                    "allowSorting": true,
                    "width": 90
                },
                {
                    "header": "Customer",
                    "binding": "Customer",
                    "allowSorting": true,
                    "width": 200
                },
                {
                    "header": "Loan No.",
                    "binding": "LoanNumber",
                    "allowSorting": true,
                    "width": 100
                },
                {
                    "header": "Pay Type",
                    "binding": "PayType",
                    "allowSorting": true,
                    "width": 100
                },
                {
                    "header": "Paid",
                    "binding": "PaidAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Penalty",
                    "binding": "PenaltyAmountDisplay",
                    "allowSorting": true,
                    "align": "right",
                    "width": 100
                },
                {
                    "header": "Remarks",
                    "binding": "Remarks",
                    "allowSorting": true,
                    "width": 200
                }
            ],
            autoGenerateColumns: false,
            itemsSource: wijmoCollectionListCollectionView,
            isReadOnly: true,
            autoSizeMode: wijmo.grid.AutoSizeMode.Both,
            allowDragging: wijmo.grid.AllowDragging.None,
            selectionMode: wijmo.grid.SelectionMode.Row
        });
    }

    function buttonGetData() {
        wijmoLoanListCollectionView = new wijmo.collections.CollectionView(getDataLoanList());
        wijmoLoanListCollectionView.canFilter = true;
        wijmoLoanListFlexGrid.itemsSource = wijmoLoanListCollectionView;

        wijmoCollectionListCollectionView = new wijmo.collections.CollectionView(getDataCollectionList());
        wijmoCollectionListCollectionView.canFilter = true;
        wijmoCollectionListFlexGrid.itemsSource = wijmoCollectionListCollectionView;
    }

    function tabLoanDetailReportClick() {
        setTimeout(function () {
            wijmoLoanListCollectionView = new wijmo.collections.CollectionView(getDataLoanList());
            wijmoLoanListCollectionView.canFilter = true;
            wijmoLoanListFlexGrid.itemsSource = wijmoLoanListCollectionView;
        }, 500);
    }

    function tabCollectionDetailReportClick() {
        setTimeout(function () {
            wijmoCollectionListCollectionView = new wijmo.collections.CollectionView(getDataCollectionList());
            wijmoCollectionListCollectionView.canFilter = true;
            wijmoCollectionListFlexGrid.itemsSource = wijmoCollectionListCollectionView;
        }, 500);
    }
    
    window.onload = function () {
        var date = new Date();

        wijmoInputDateStartDate = new wijmo.input.InputDate('#wijmoInputDateStartDate', {
            format: 'MM-dd-yyyy',
            value: new Date(date.getFullYear(), date.getMonth(), 1)
        });

        wijmoInputDateEndDate = new wijmo.input.InputDate('#wijmoInputDateEndDate', {
            format: 'MM-dd-yyyy',
            value: new Date(date.getFullYear(), date.getMonth() + 1, 0)
        });

        createWijmoGridCollectionList();
        createWijmoGridLoanList();
    }
</script>